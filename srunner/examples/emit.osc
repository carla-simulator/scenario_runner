import basic.osc

scenario top:
    path: Path                      # A path in the map
    path.set_map("Town04")    # specify map to use in this test
    path.path_min_driving_lanes(2)         # Path should have at least two lanes

    ego_vehicle: Model3              # ego car
    npc: Rubicon               # The other car
  
    other_car: Rubicon = npc
    distance: length = 15m           # drive 15m

    event start
    event end
    event near_collision(other_car: Rubicon, distance: length)

    do serial:
        get_ahead: parallel(duration: 30s):
            ego_vehicle.drive(path) with:
                speed(20kph)
                lane(1, at: start) # left to right: [1..n]
            npc.drive(path) with:
                lane(right_of: ego_vehicle, at: start)
                position(15m, behind: ego_vehicle, at: start)
                position(20m, ahead_of: ego_vehicle, at: end)

        change_lane: parallel(duration: 5s):
            ego_vehicle.drive(path)
            npc.drive(path) with:
                lane(same_as: ego_vehicle, at: end)

        slow: parallel(duration: 20s):
            ego_vehicle.drive(path)
            npc.drive(path) with:
                speed(10kph)
            emit near_collision(other_car: other_car, distance: distance)


